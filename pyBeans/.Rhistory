m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) + # Group by sequence#
(1 + TS_aud + TS_vis + vis_gazeBA + vis_gazeAB | modality)#
, family = binomial(link='logit'),data=data.sel)
m2
anova(m,m2)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 + TS_vis + vis_gazeBA + vis_gazeAB | modality)#
, family = binomial(link='logit'),data=data.sel)
m
xyplot(RI_target2.Restricted~TS_sequence,groups=first,data=data.sel,auto.key=TRUE)
xyplot(RI_target2.Restricted~TS_sequence,groups=first,type='a',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_sequence,groups=first,type='a',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_sequence,groups=first,type='b',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_sequence,groups=first,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_sequence,groups=first,type='rp',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_sequence,groups=first,type='p',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_sequence,groups=first,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~seq_intervene,groups=first,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~seq_part,groups=first,type='r',data=data.sel,auto.key=TRUE)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 + TS_vis + vis_gazeBA + vis_gazeAB | modality)#
, family = binomial(link='logit'),data=data.sel)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 + TS_vis + vis_gazeBA + vis_gazeAB + seq_part | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) + # Group by sequence#
(1 + TS_vis + vis_gazeBA + vis_gazeAB | modality)#
, family = binomial(link='logit'),data=data.sel)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 + seq_part | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
xyplot(as.numeric(RI_target2.Restricted)~TS_aud,groups=first,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_vis,groups=first,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_aud,groups=first,type='r',data=data.sel,auto.key=TRUE)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + seq_part | first) + # Group by sequence#
(1 + TS_vis + vis_gazeBA + vis_gazeAB | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
xyplot(as.numeric(RI_target2.Restricted)~TS_vis,groups=modality,type='r',data=data.sel,auto.key=TRUE)
m2
xyplot(as.numeric(RI_target2.Restricted)~TS_aud,groups=modality,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~vis_gazeAB,groups=modality,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~TS_vis,groups=modality,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~vis_gazeAB,groups=modality,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~vis_gazeAB,groups=modality,type='b',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~vis_gazeAB,groups=modality,type='r',data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~vis_gazeAB,groups=modality,type=c('r','p'),data=data.sel,auto.key=TRUE)
xyplot(as.numeric(RI_target2.Restricted)~vis_gazeBA,groups=modality,type='r',data=data.sel,auto.key=TRUE)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 | modality)#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 + vis_gazeBA| modality)#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 | modality)#
, family = binomial(link='logit'),data=data.sel)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 + TS_sequence + seq_intervene | first) + # Group by sequence#
(1 + vis_gazeBA| modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
m2
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1  | modality)#
, family = binomial(link='logit'),data=data.sel)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 + TS_vis + vis_gazeBA + vis_gazeAB | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 + vis_gazeBA | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 + TS_vis | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
m2 = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
(0 + TS_vis | modality)#
, family = binomial(link='logit'),data=data.sel)
anova(m,m2)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
TS_vis:modality#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
TS_vis:modality + (1 | recording) #
, family = binomial(link='logit'),data=data.sel)
m
m2
mx = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis:modality + #
seq_intervene + #
modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
summary(m)
lang.datapoints = tapply(data.sel$language,data.sel$language,length)#
lang.weights = round((1/lang.datapoints)*10000)#
case.weights = lang.weights[data.sel$language]
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel,weights=cast.weights)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel,weights=case.weights)
case.weights
lang.weights
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel,weights=case.weights)
?lmer
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel,weights=case.weights/max(case.weights))
m
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel,weights=log(case.weights)/max(log(case.weights)))
m
lm(RI_target2.Restricted~ oirs.per.minute + seq_part + modality + TS_vis + TS_vis:modality + seq_intervene + vis_gazeBA + vis_gazeAB + (vis_gazeAB:vis_gazeBA) + modality:vis_gazeBA + TS_sequence + TS_aud + TS_par, data = data.sel)
summary(lm(RI_target2.Restricted~ oirs.per.minute + seq_part + modality + TS_vis + TS_vis:modality + seq_intervene + vis_gazeBA + vis_gazeAB + (vis_gazeAB:vis_gazeBA) + modality:vis_gazeBA + TS_sequence + TS_aud + TS_par, data = data.sel))
summary(lm(RI_target2.Restricted~ oirs.per.minute + seq_part + modality + TS_vis + TS_vis:modality + seq_intervene + vis_gazeBA + vis_gazeAB + (vis_gazeAB:vis_gazeBA) + modality:vis_gazeBA + TS_sequence + TS_aud + TS_par + first, data = data.sel))
summary(lm(RI_target2.Restricted~ oirs.per.minute + seq_part + modality + TS_vis + TS_vis:modality + seq_intervene + vis_gazeBA + vis_gazeAB + (vis_gazeAB:vis_gazeBA) + modality:vis_gazeBA + TS_sequence + TS_aud + TS_par + first + language, data = data.sel))
vars = strsplit(as.character(m@call$formula)[3],'\\+')[[1]]
vars
paste('a','b')
i = 1
	fx = as.formula(paste("RI_target2.Restricted~ ",vars[1:(length(vars)-3)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language")),collapse='+')
	fx = as.formula(paste("RI_target2.Restricted~ ",vars[1:(length(vars)-3)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language"),collapse='+')
)
paste("(1 + ",vars[i],"|language")
	fx = as.formula(paste("RI_target2.Restricted~ ",vars[1:(length(vars)-3)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)"),collapse='+')
)
fx
paste("RI_target2.Restricted~ ",vars[1:(length(vars)-3)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)"),collapse='+')
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-3)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+')
)
fx
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
vars = strsplit(as.character(m@call$formula)[3],'\\+')[[1]]
vars
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-3)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))
fx
vars[(length(vars)-2):length(vars)]
vars[1:(length(vars)-3)]
vars[1:(length(vars)-4)]
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-4)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))
fx
for(i in 1:(length(vars)-3)){#
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-4)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))#
	anova(m,lmer(fx,family = binomial(link='logit'),data=data.sel))#
}
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-4)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))#
	anova(m,lmer(fx,family = binomial(link='logit'),data=data.sel))
r = anova(m,lmer(fx,family = binomial(link='logit'),data=data.sel))
names(r)
r
r$Df
summary(r)
r
r[[1]]
r[1:10]
r[1:3]
r[1:7]
r[1:7]
as.numeric(r[1:7])
r[1,1:7]
r[2,1:7]
as.numeric(r[2,1:7])
for(i in 1:(length(vars)-3)){#
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-4)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))#
	r = anova(m,lmer(fx,family = binomial(link='logit'),data=data.sel))#
	print(vars[i])#
	print(as.numeric(r[2,1:7]))#
}
vars
vars[(length(vars)-3)]
byLang = data.table(nrows=length(vars)-4,ncol=8)
byLang = data.frame(nrows=length(vars)-4,ncol=8)
byLang
?data.frame
byLang = data.frame(matrix(nrows=length(vars)-4,ncol=8))
?matrix
byLang = data.frame(matrix(nrow=length(vars)-4,ncol=8))
byLang
r
r[1,4]
r[1,4] - r[2,4]
r[2,4] - r[1,4]
lang.datapoints = tapply(data.sel$language,data.sel$language,length)#
lang.weights = (1/lang.datapoints)#
case.weights = lang.weights[data.sel$language]
byLang = data.frame(matrix(nrowt=length(vars)-4,ncol=8))
byLang = data.frame(matrix(nrow=length(vars)-4,ncol=8))
	byLang[i,] = c(vars[i],as.numeric(r[2,1:7]),r[2,4] - r[1,4])
c(vars[i],as.numeric(r[2,1:7]),r[2,4] - r[1,4])
byLang = data.frame(matrix(nrow=length(vars)-4,ncol=9))
	byLang[i,] = c(vars[i],as.numeric(r[2,1:7]),r[2,4] - r[1,4])
byLang
names(byLang) = c("Df","AIC","BIC","logLik",'Chisq','Chi Df','Pr(>Chisq)','logLikDiff')
	byLang[i,] = c(vars[i],as.numeric(r[2,1:7]),r[2,4] - r[1,4])
	r = anova(m,lmer(fx,family = binomial(link='logit'),data=data.sel,weights=case.weights))
m.w = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel,weights=case.weights)
m.w
tapply(case.weights,data.sel$langauge,sum)
length(case.weights)
tapply(case.weights,data.sel$language,sum)
# Weighted#
vars = strsplit(as.character(m@call$formula)[3],'\\+')[[1]]#
byLang.w = data.frame(matrix(nrowt=length(vars)-4,ncol=8))#
names(byLang.w) = c("Df","AIC","BIC","logLik",'Chisq','Chi Df','Pr(>Chisq)','logLikDiff')#
for(i in 1:(length(vars)-4)){#
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-4)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))#
	r = anova(m.w,lmer(fx,family = binomial(link='logit'),data=data.sel,weights=case.weights))#
	print(vars[i])#
	byLang.w[i,] = c(vars[i],as.numeric(r[2,1:7]),r[2,4] - r[1,4])#
}
vars = strsplit(as.character(m@call$formula)[3],'\\+')[[1]]#
byLang.w = data.frame(matrix(nrow=length(vars)-4,ncol=8))#
names(byLang.w) = c("Df","AIC","BIC","logLik",'Chisq','Chi Df','Pr(>Chisq)','logLikDiff')#
for(i in 1:(length(vars)-4)){#
	fx = as.formula(paste(c("RI_target2.Restricted~ ",vars[1:(length(vars)-4)],vars[(length(vars)-2):length(vars)],paste("(1 + ",vars[i],"|language)")),collapse='+'))#
	r = anova(m.w,lmer(fx,family = binomial(link='logit'),data=data.sel,weights=case.weights))#
	print(vars[i])#
	byLang.w[i,] = c(vars[i],as.numeric(r[2,1:7]),r[2,4] - r[1,4])#
}
warnings()
byLang.w
r
data.sel = data.sel[data.sel$language=='LSA',]
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
#
(1 | recording) + # Group by recording#
#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
#
(1 | recording) + # Group by recording#
#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + #
#
(1 | recording) + # Group by recording#
#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA +#
TS_sequence + #
TS_aud +#
TS_par + #
#
(1 | recording) + # Group by recording#
#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + #
TS_sequence + #
TS_aud +#
TS_par + #
#
(1 | recording) + # Group by recording#
#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + #
TS_sequence + #
TS_aud +#
TS_par + #
(1 | recording) + # Group by recording#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + #
TS_sequence + #
TS_par + #
(1 | recording) + # Group by recording#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m = lm(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + #
TS_sequence + #
TS_par + #
,data=data.sel)
m = lm(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
TS_vis + #
seq_intervene + #
vis_gazeBA + #
TS_sequence + #
TS_par  #
,data=data.sel)
m
summary(m)
data.sel = d.oir#
#
data.sel$RI_target2.Restricted = as.integer(data.sel$RI_target2)-1#
# TODO: center around 0?#
data.sel$TS_sequence.Question = as.factor(data.sel$TS_sequence=='1PP')#
#
lang.datapoints = tapply(data.sel$language,data.sel$language,length)#
lang.weights = (1/lang.datapoints)#
case.weights = lang.weights[data.sel$language]
m = lmer(RI_target2.Restricted~ #
oirs.per.minute + #
seq_part + #
modality + #
TS_vis + TS_vis:modality + #
seq_intervene + #
vis_gazeBA + vis_gazeAB + vis_gazeAB:vis_gazeBA + modality:vis_gazeBA +modality:vis_gazeAB +#
TS_sequence + #
TS_aud +#
TS_par + TS_par:modality +#
(1 | language) + # Group by language#
(1 | recording) + # Group by recording#
(1 | language.family) + # Group by language family#
(1 | first) # Group by sequence#
, family = binomial(link='logit'),data=data.sel)
m
setwd("~/Documents/MPI/JellyBeans/pyBeans/")#
#
d = read.table("experSettings.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)
levs = as.character(levels(factor(d$s1)))#
mat.self = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat.self[i,j] = mean(d[(d$s1==ix & d$s2==jx)),]$money1)#
	}#
}
levs = as.character(levels(factor(d$s1)))#
mat.self = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat.self[i,j] = mean(d[(d$s1==ix & d$s2==jx),]$money1)#
	}#
}
mat.self.sorted = mat.self[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.self.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
totalScores = tapply(d$money1,d$s1,sum)+tapply(d$money2,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.self.sorted = mat.self[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.self.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
mat.self
mat.self[i,j]
mat.self[i,j-1]
j
i
ix
ji
ij
jx
d[(d$s1==ix & d$s2==jx),]$money1
mean(d[(d$s1==ix & d$s2==jx),]$money1)
levs = as.character(levels(factor(d$s1)))#
mat.self = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat.self[i,j] = mean(c(d[(d$s1==ix & d$s2==jx),]$money1,d[(d$s2==ix & d$s1==jx),]$money2))#
	}#
}#
#
totalScores = tapply(d$money1,d$s1,sum)+tapply(d$money2,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.self.sorted = mat.self[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.self.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
levs = as.character(levels(factor(d$s1)))#
mat.self = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat.self[i,j] = mean(c(d[(d$s1==ix & d$s2==jx),]$money1,d[(d$s2==ix & d$s1==jx),]$money2)) - mean(c(d[(d$s1==ix & d$s2==jx),]$money2,d[(d$s2==ix & d$s1==jx),]$money1))#
	}#
}#
#
totalScores = tapply(d$money1,d$s1,sum)+tapply(d$money2,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.self.sorted = mat.self[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.self.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
mat.self
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
tapply(c(d$s1))#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
par(mar=c(12,12,4,2))#
image(mat,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)
setwd("~/Documents/MPI/JellyBeans/pyBeans/")#
#
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
tapply(c(d$s1))#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
par(mar=c(12,12,4,2))#
image(mat,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)
totalScores
totalScores = tapply(d$totMoney,d$s1,sum)+tapply(d$totMoney,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
image(mat,xaxt='n',yaxt='n')
setwd("~/Documents/MPI/JellyBeans/pyBeans/")#
#
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
tapply(c(d$s1))#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
par(mar=c(12,12,4,2))#
image(mat,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
#####
#
totalScores = tapply(d$totMoney,d$s1,sum)+tapply(d$totMoney,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
levs = as.character(levels(factor(d$s1)))#
mat.self = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat.self[i,j] = mean(c(d[(d$s1==ix & d$s2==jx),]$money1,d[(d$s2==ix & d$s1==jx),]$money2)) #
	}#
}#
#
totalScores = tapply(d$money1,d$s1,sum)+tapply(d$money2,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.self.sorted = mat.self[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.self.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
grep(levs,"_SORT")
levs
grep("_SORT",levs)
grep("_SORT",levs,values=TRUE)
?grep
grep("_SORT",levs,value=TRUE)
levs = levs[levs!=grep("_SORT",levs,value=TRUE)]
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
levs
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[levs!=grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d$totMoney,d$s1,sum)+tapply(d$totMoney,d$s2,sum)#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
levs[order(totalScores)]
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs]$totMoney,d$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs]$totMoney,d$s2,sum)
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d$s2,sum)
d$s1 %in% levs & d$s2 %in% levs
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)
totalScores[order(totalScores)]
mat.sorted = mat[order(totalScores),order(totalScores)]
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)
totalScores
les
levs
levs = levs[levs!=grep("_SORT",levs,value=TRUE)]
levs = as.character(levels(factor(d$s1)))
levs = levs[levs!=grep("_SORT",levs,value=TRUE)]
levs
levs = as.character(levels(factor(d$s1)))
grep("_SORT",levs,value=TRUE)
levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]
levs = as.character(levels(factor(d$s1)))
levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]
levs
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
totalScores
totalScores = totalScores[!is.na(totalScores)]
totalScores[order(totalScores)]
mat.sorted = mat[order(totalScores),order(totalScores)]
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
d = read.table("experSettings_Sort.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores = totalScores[!is.na(totalScores)]#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,mean)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,mean)
totalScores = totalScores[!is.na(totalScores)]
totalScores[order(totalScores)]
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)
totalScores = totalScores[!is.na(totalScores)]
totalScores[order(totalScores)]
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
d = read.table("experSettings_Sort_PunishGap.txt",sep=',',header=TRUE)
tail(d)
d = read.table("experSettings_Sort_PunishGap.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores = totalScores[!is.na(totalScores)]#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
d = read.table("experSettings_Sort_PunishGap.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores = totalScores[!is.na(totalScores)]#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
head(d)
levels(factor(d$full_full))
d = read.table("experSettings_Sort_PunishGap.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
# Only look at punish gap results#
d = d[d$full_full==-1,]#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores = totalScores[!is.na(totalScores)]#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
d = read.table("experSettings_Sort_PunishGap.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
# Only look at punish gap results#
d = d[d$full_full==-1,]#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
levs = levs[levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores = totalScores[!is.na(totalScores)]#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
d = read.table("experSettings_Sort_PunishGap.txt",sep=',',header=TRUE)#
#
d$totMoney = apply(d[,c('money1','money2')],1,sum)#
#
# Only look at punish gap results#
d = d[d$full_full==-1,]#
#
getMeanMoney = function(x,y,data=d){#
	m = d[sum(c(d$s1,d$s2) %in% c(x,y))==2,c('money1','money2')]#
	#
}#
#
levs = as.character(levels(factor(d$s1)))#
#
# get rid of sorted-first strategies#
#levs = levs[!levs %in% grep("_SORT",levs,value=TRUE)]#
#
mat = matrix(nrow=length(levs),ncol=length(levs))#
for(i in 1:length(levs)){#
	for(j in 1:length(levs)){#
		ix = levs[i]#
		jx = levs[j]#
		mat[i,j] = mean(d[(d$s1==ix & d$s2==jx) | (d$s1==jx & d$s2==ix),]$totMoney)#
	}#
}#
#
#par(mar=c(12,12,4,2))#
#image(mat,xaxt='n',yaxt='n')#
#axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs,las=2)#
#
totalScores = tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s1,sum)+tapply(d[d$s1 %in% levs & d$s2 %in% levs,]$totMoney,d[d$s1 %in% levs & d$s2 %in% levs,]$s2,sum)#
totalScores = totalScores[!is.na(totalScores)]#
totalScores[order(totalScores)]#
#
mat.sorted = mat[order(totalScores),order(totalScores)]#
par(mar=c(12,12,4,2))#
image(mat.sorted,xaxt='n',yaxt='n')#
axis(1,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)#
axis(2,at=(0:(length(levs)-1))/(length(levs)-1),labels=levs[order(totalScores)],las=2)
